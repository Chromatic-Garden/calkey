generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

model BinReason {
    id            String            @id @default(cuid())
    name          String
    description   String?

    mealConsumers BinMealConsumer[]

    @@index([name], type: Hash)
}

model BinMealConsumer {
    id         String     @id @default(cuid())
    mealId     String
    reasonId   String?
    portion    Float      @default(1)
    consumedAt DateTime   @default(now())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    meal       Meal       @relation(fields: [mealId], references: [id], onDelete: Cascade)
    reason     BinReason? @relation(fields: [reasonId], references: [id])

    @@index([portion])
}

model GuestMealConsumer {
    id         String   @id @default(cuid())
    mealId     String
    name       String?
    portion    Float    @default(1)
    consumedAt DateTime @default(now())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    meal       Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)

    @@index([portion])
}

model UserMealConsumer {
    id         String   @id @default(cuid())
    mealId     String
    userId     String
    portion    Float    @default(1)
    consumedAt DateTime @default(now())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    meal       Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([portion])
}

model Meal {
    id             String              @id @default(cuid())
    name           String
    description    String?
    typeId         String
    portions       Float
    createdAt      DateTime            @default(now())
    updatedAt      DateTime            @updatedAt

    binConsumers   BinMealConsumer[]
    guestConsumers GuestMealConsumer[]
    userConsumers  UserMealConsumer[]
    recipes        MealRecipe[]

    type           MealType            @relation(fields: [typeId], references: [id])

    @@index([name], type: Hash)
    @@index([portions])
}

model MealType {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    meals       Meal[]

    @@index([name], type: Hash)
}

model MealRecipe {
    mealId    String
    recipeId  String
    quantity  Float    @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    meal      Meal     @relation(fields: [mealId],   references: [id], onDelete: Cascade)
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@id([mealId, recipeId])
    @@index([quantity])
}

model Recipe {
    id          String             @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt

    meals       MealRecipe[]
    ingredients RecipeIngredient[]

    parents     RecipeRecipe[]     @relation(name: "parents")
    children    RecipeRecipe[]     @relation(name: "children")

    @@index([name], type: Hash)
}

model RecipeRecipe {
    parentId  String
    childId   String
    quantity  Float    @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    parent    Recipe   @relation(name: "parents",  fields: [parentId], references: [id], onDelete: Cascade)
    child     Recipe   @relation(name: "children", fields: [childId],  references: [id], onDelete: Cascade)

    @@id([parentId, childId])
    @@index([quantity])
}

model RecipeIngredient {
    recipeId     String
    ingredientId String
    unitId       String
    quantity     Float
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    recipe       Recipe     @relation(fields: [recipeId],     references: [id], onDelete: Cascade)
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
    unit         Unit       @relation(fields: [unitId],       references: [id], onDelete: Cascade)

    @@id([recipeId, ingredientId])
    @@index([quantity])
}

model Ingredient {
    id                  String                         @id @default(cuid())
    name                String
    description         String?
    defaultUnitId       String?
    createdAt           DateTime                       @default(now())
    updatedAt           DateTime                       @updatedAt

    recipes             RecipeIngredient[]
    nutrients           IngredientNutrient[]
    unitTypeConversions IngredientUnitTypeConversion[]

    defaultUnit         Unit?                          @relation(fields: [defaultUnitId], references: [id])

    @@index([name], type: Hash)
}

model IngredientNutrient {
    ingredientId String
    nutrientId   String
    unitId       String
    quantity     Float
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
    nutrient     Nutrient   @relation(fields: [nutrientId],   references: [id])
    unit         Unit       @relation(fields: [unitId],       references: [id], onDelete: Cascade)

    @@id([ingredientId, nutrientId])
    @@index([quantity])
}

model Nutrient {
    id              String                       @id @default(cuid())
    parentId        String?
    typeId          String
    name            String
    description     String?
    defaultUnitId   String?
    createdAt       DateTime                     @default(now())
    updatedAt       DateTime                     @updatedAt

    ingredients     IngredientNutrient[]
    children        Nutrient[]                   @relation(name: "children")
    unitConversions NutrientUnitTypeConversion[]

    parent          Nutrient?                    @relation(name: "children", fields: [parentId],      references: [id])
    type            NutrientType                 @relation(                  fields: [typeId],        references: [id])
    defaultUnit     Unit?                        @relation(                  fields: [defaultUnitId], references: [id])

    @@index([name], type: Hash)
}

model NutrientType {
    id          String     @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    nutrients   Nutrient[]

    @@index([name], type: Hash)
}

model Unit {
    id                               String                         @id @default(cuid())
    name                             String
    symbol                           String?
    description                      String?
    unitTypeId                       String
    unitSystemId                     String
    unitSystemScale                  Float                          @default(1)
    createdAt                        DateTime                       @default(now())
    updatedAt                        DateTime                       @updatedAt

    recipeIngredients                RecipeIngredient[]
    ingredientDefaults               Ingredient[]
    ingredientNutrients              IngredientNutrient[]
    nutrientDefaults                 Nutrient[]
    ingredientConversionSources      IngredientUnitTypeConversion[] @relation(name: "sourceUnit")
    ingredientConversionDestinations IngredientUnitTypeConversion[] @relation(name: "destinationUnit")
    nutrientConversionSources        NutrientUnitTypeConversion[]   @relation(name: "sourceUnit")
    nutrientConversionDestinations   NutrientUnitTypeConversion[]   @relation(name: "destinationUnit")
    unitSystemDefaults               UnitSystem[]                   @relation(name: "defaultUnit")
    userWeightMeasurements           UserWeightMeasurement[]

    unitType                         UnitType                       @relation(fields: [unitTypeId],   references: [id])
    unitSystem                       UnitSystem                     @relation(fields: [unitSystemId], references: [id])

    @@unique([id, unitTypeId])
    @@index([name],            type: Hash)
    @@index([symbol],          type: Hash)
    @@index([unitSystemScale], type: Hash)
}

model UnitType {
    id                               String                         @id @default(cuid())
    name                             String
    description                      String?
    createdAt                        DateTime                       @default(now())
    updatedAt                        DateTime                       @updatedAt

    units                            Unit[]
    unitSystemConversions            UnitSystemConversion[]
    ingredientConversionSources      IngredientUnitTypeConversion[] @relation(name: "sourceUnitType")
    ingredientConversionDestinations IngredientUnitTypeConversion[] @relation(name: "destinationUnitType")
    nutrientConversionSources        NutrientUnitTypeConversion[]   @relation(name: "sourceUnitType")
    nutrientConversionDestinations   NutrientUnitTypeConversion[]   @relation(name: "destinationUnitType")

    @@index([name], type: Hash)
}

model UnitSystem {
    id                     String                 @id @default(cuid())
    name                   String
    description            String?
    defaultUnitId          String
    createdAt              DateTime               @default(now())
    updatedAt              DateTime               @updatedAt

    units                  Unit[]
    sourceConversions      UnitSystemConversion[] @relation(name: "sourceUnitSystem")
    destinationConversions UnitSystemConversion[] @relation(name: "destinationUnitSystem")

    defaultUnit            Unit                   @relation(name: "defaultUnit", fields: [defaultUnitId], references: [id])

    @@index([name], type: Hash)
}

model UnitSystemConversion {
    unitTypeId              String
    sourceUnitSystemId      String
    destinationUnitSystemId String
    factor                  Float      @default(1)
    offset                  Float      @default(0)
    createdAt               DateTime   @default(now())
    updatedAt               DateTime   @updatedAt

    unitType                UnitType   @relation(fields: [unitTypeId], references: [id])
    sourceUnitSystem        UnitSystem @relation(name: "sourceUnitSystem",      fields: [sourceUnitSystemId],      references: [id])
    destinationUnitSystem   UnitSystem @relation(name: "destinationUnitSystem", fields: [destinationUnitSystemId], references: [id])

    @@id([unitTypeId, sourceUnitSystemId, destinationUnitSystemId])    
    @@index([factor], type: Hash)
    @@index([offset], type: Hash)
}

model IngredientUnitTypeConversion {
    ingredientId          String
    sourceUnitTypeId      String
    sourceUnitId          String
    destinationUnitTypeId String
    destinationUnitId     String
    factor                Float      @default(1)
    createdAt             DateTime   @default(now())
    updatedAt             DateTime   @updatedAt

    ingredient            Ingredient @relation(                             fields: [ingredientId],                             references: [id])
    sourceUnitType        UnitType   @relation(name: "sourceUnitType",      fields: [sourceUnitTypeId],                         references: [id])
    sourceUnit            Unit       @relation(name: "sourceUnit",          fields: [sourceUnitId, sourceUnitTypeId],           references: [id, unitTypeId])
    destinationUnitType   UnitType   @relation(name: "destinationUnitType", fields: [destinationUnitTypeId],                    references: [id])
    destinationUnit       Unit       @relation(name: "destinationUnit",     fields: [destinationUnitId, destinationUnitTypeId], references: [id, unitTypeId])

    @@id([ingredientId, sourceUnitTypeId, destinationUnitTypeId])
    @@index([factor], type: Hash)
}

model NutrientUnitTypeConversion {
    nutrientId            String
    sourceUnitTypeId      String
    sourceUnitId          String
    destinationUnitTypeId String
    destinationUnitId     String
    factor                Float      @default(1)
    createdAt             DateTime   @default(now())
    updatedAt             DateTime   @updatedAt

    nutrient              Nutrient   @relation(                             fields: [nutrientId],                               references: [id])
    sourceUnitType        UnitType   @relation(name: "sourceUnitType",      fields: [sourceUnitTypeId],                         references: [id])
    sourceUnit            Unit       @relation(name: "sourceUnit",          fields: [sourceUnitId, sourceUnitTypeId],           references: [id, unitTypeId])
    destinationUnitType   UnitType   @relation(name: "destinationUnitType", fields: [destinationUnitTypeId],                    references: [id])
    destinationUnit       Unit       @relation(name: "destinationUnit",     fields: [destinationUnitId, destinationUnitTypeId], references: [id, unitTypeId])

    @@id([nutrientId, sourceUnitId, destinationUnitId])
    @@index([factor], type: Hash)
}

model UserWeightMeasurement {
    id         String   @id @default(cuid())
    userId     String
    weight     Float
    unitId     String
    measuredAt DateTime @default(now())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    unit       Unit     @relation(fields: [unitId], references: [id])
}

model Account {
    id                       String   @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt

    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId], type: Hash)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], type: Hash)
}

model User {
    id            String             @id @default(cuid())
    username      String?            @unique
    email         String?            @unique
    emailVerified DateTime?
    displayName   String
    image         String?
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt

    accounts      Account[]
    sessions      Session[]
    meals         UserMealConsumer[]

    @@index([username], type: Hash)
    @@index([email], type: Hash)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}
