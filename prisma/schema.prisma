generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

model MealConsumer {
    mealId   String
    userId   String
    portion  Float  @default(1)

    meal     Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([mealId, userId])
    @@index([portion])
}

model Meal {
    id          String         @id @default(cuid())
    name        String
    description String?
    typeId      String
    portions    Float
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt

    consumers   MealConsumer[]
    recipes     MealRecipe[]

    type        MealType       @relation(fields: [typeId], references: [id])

    @@index([name], type: Hash)
    @@index([portions])
}

model MealType {
    id          String  @id @default(cuid())
    name        String
    description String?

    meals       Meal[]

    @@index([name], type: Hash)
}

model MealRecipe {
    mealId    String
    recipeId  String
    quantity  Float    @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    meal      Meal     @relation(fields: [mealId],   references: [id], onDelete: Cascade)
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@id([mealId, recipeId])
    @@index([quantity])
}

model Recipe {
    id          String             @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt

    meals       MealRecipe[]
    ingredients RecipeIngredient[]

    parents     RecipeRecipe[]     @relation(name: "parents")
    children    RecipeRecipe[]     @relation(name: "children")

    @@index([name], type: Hash)
}

model RecipeRecipe {
    parentId String
    childId  String
    quantity Float  @default(1)

    parent   Recipe @relation(name: "parents",  fields: [parentId], references: [id], onDelete: Cascade)
    child    Recipe @relation(name: "children", fields: [childId],  references: [id], onDelete: Cascade)

    @@id([parentId, childId])
    @@index([quantity])
}

model RecipeIngredient {
    recipeId     String
    ingredientId String
    unitId       String
    quantity     Float
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    recipe       Recipe     @relation(fields: [recipeId],     references: [id], onDelete: Cascade)
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
    unit         Unit       @relation(fields: [unitId],       references: [id], onDelete: Cascade)

    @@id([recipeId, ingredientId])
    @@index([quantity])
}

model Ingredient {
    id            String               @id @default(cuid())
    name          String
    description   String?
    defaultUnitId String?
    density       Float?
    createdAt     DateTime             @default(now())
    updatedAt     DateTime             @updatedAt

    recipes       RecipeIngredient[]
    nutrients     IngredientNutrient[]

    defaultUnit   Unit?                @relation(fields: [defaultUnitId], references: [id])

    @@index([name], type: Hash)
    @@index([density])
}

model IngredientNutrient {
    ingredientId String
    nutrientId   String
    unitId       String
    quantity     Float
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
    nutrient     Nutrient   @relation(fields: [nutrientId],   references: [id])
    unit         Unit       @relation(fields: [unitId],       references: [id], onDelete: Cascade)

    @@id([ingredientId, nutrientId])
    @@index([quantity])
}

model Nutrient {
    id            String               @id @default(cuid())
    parentId      String?
    typeId        String
    name          String
    description   String?
    defaultUnitId String?

    ingredients   IngredientNutrient[]
    children      Nutrient[]           @relation(name: "children")

    parent        Nutrient?            @relation(name: "children", fields: [parentId],      references: [id])
    type          NutrientType         @relation(                  fields: [typeId],        references: [id])
    defaultUnit   Unit?                @relation(                  fields: [defaultUnitId], references: [id])

    @@index([name], type: Hash)
}

model NutrientType {
    id          String     @id @default(cuid())
    name        String
    description String?

    nutrients   Nutrient[]

    @@index([name], type: Hash)
}

model Unit {
    id                  String               @id @default(cuid())
    name                String
    description         String?
    unitTypeId          String
    unitSystemId        String
    unitSystemScale     Float                @default(1)

    recipeIngredients   RecipeIngredient[]
    ingredientDefaults  Ingredient[]
    ingredientNutrients IngredientNutrient[]
    nutrientDefaults    Nutrient[]

    unitType            UnitType             @relation(fields: [unitTypeId],   references: [id])
    unitSystem          UnitSystem           @relation(fields: [unitSystemId], references: [id])

    @@index([name],            type: Hash)
    @@index([unitSystemScale], type: Hash)
}

model UnitType {
    id             String    @id @default(cuid())
    name           String
    description    String?

    units          Unit[]

    @@index([name], type: Hash)
}

model UnitSystem {
    id                     String                 @id @default(cuid())
    name                   String
    description            String?

    units                  Unit[]
    sourceConversions      UnitSystemConversion[] @relation("sourceUnitSystem")
    destinationConversions UnitSystemConversion[] @relation("destinationUnitSystem")

    @@index([name], type: Hash)
}

model UnitSystemConversion {
    sourceUnitSystemId      String
    destinationUnitSystemId String
    multiplier              Float      @default(1)
    offset                  Float      @default(0)

    sourceUnitSystem        UnitSystem @relation(name: "sourceUnitSystem",      fields: [sourceUnitSystemId],      references: [id])
    destinationUnitSystem   UnitSystem @relation(name: "destinationUnitSystem", fields: [destinationUnitSystemId], references: [id])

    @@id([sourceUnitSystemId, destinationUnitSystemId])    
    @@index([multiplier], type: Hash)
    @@index([offset],     type: Hash)
}

model Account {
    id                       String   @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt

    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])

    @@index([userId], type: Hash)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], type: Hash)
}

model User {
    id            String    @id @default(cuid())
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    displayName   String
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts      Account[]
    sessions      Session[]
    meals         MealConsumer[]

    @@index([username], type: Hash)
    @@index([email], type: Hash)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}
