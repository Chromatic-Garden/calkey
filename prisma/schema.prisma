generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

model BinReason {
    id            Int               @id @default(autoincrement())
    name          String
    description   String?

    mealConsumers BinMealConsumer[]

    @@index([name], type: Hash)
}

model BinMealConsumer {
    id         Int        @id @default(autoincrement())
    mealId     Int
    reasonId   Int?
    portion    Float      @default(1)
    binnedAt   DateTime   @default(now())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    meal       Meal       @relation(fields: [mealId],   references: [id], onDelete: Cascade)
    reason     BinReason? @relation(fields: [reasonId], references: [id])

    @@index([portion])
}

model GuestMealConsumer {
    id         Int       @id @default(autoincrement())
    mealId     Int
    name       String?
    portion    Float     @default(1)
    startedAt  DateTime  @default(now())
    finishedAt DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    meal       Meal      @relation(fields: [mealId], references: [id], onDelete: Cascade)

    @@index([portion])
}

model UserMealConsumer {
    id         Int       @id @default(autoincrement())
    mealId     Int
    userId     Int
    portion    Float     @default(1)
    startedAt  DateTime  @default(now())
    finishedAt DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    meal       Meal      @relation(fields: [mealId], references: [id], onDelete: Cascade)
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([portion])
}

model Meal {
    id               Int                 @id @default(autoincrement())
    name             String
    description      String?
    typeId           Int
    portions         Float
    preparedByUserId Int?
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @updatedAt

    binConsumers     BinMealConsumer[]
    guestConsumers   GuestMealConsumer[]
    userConsumers    UserMealConsumer[]
    recipes          MealRecipe[]

    type             MealType            @relation(fields: [typeId], references: [id])
    preparedByUser   User?               @relation(fields: [preparedByUserId], references: [id])

    @@index([name], type: Hash)
    @@index([portions])
}

model MealType {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    meals       Meal[]

    @@index([name], type: Hash)
}

model MealIngredient {
    mealId           Int
    ingredientId     Int
    unitSystemUnitId Int
    quantity         Float
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    ingredient       Ingredient     @relation(fields: [ingredientId], references: [id])
    unitSystemUnit   UnitSystemUnit @relation(fields: [unitSystemUnitId], references: [id])

    @@id([mealId, ingredientId])
}

model MealRecipe {
    mealId      Int
    recipeId    Int
    recipeScale Float    @default(1)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    meal        Meal     @relation(fields: [mealId],   references: [id], onDelete: Cascade)
    recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@id([mealId, recipeId])
    @@index([recipeScale])
}

model Recipe {
    id          Int                @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt

    methodSteps RecipeMethodStep[]
    meals       MealRecipe[]
    ingredients RecipeIngredient[]

    parents     RecipeRecipe[]     @relation(name: "parents")
    children    RecipeRecipe[]     @relation(name: "children")

    @@index([name], type: Hash)
}

model RecipeMethodStep {
    recipeId  Int
    step      Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    recipe    Recipe @relation(fields: [recipeId], references: [id])

    @@id([recipeId, step])
}

model RecipeRecipe {
    parentId  Int
    childId   Int
    quantity  Float    @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    parent    Recipe   @relation(name: "parents",  fields: [parentId], references: [id], onDelete: Cascade)
    child     Recipe   @relation(name: "children", fields: [childId],  references: [id], onDelete: Cascade)

    @@id([parentId, childId])
    @@index([quantity])
}

model RecipeIngredient {
    recipeId         Int
    ingredientId     Int
    unitSystemUnitId Int
    quantity         Float
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    recipe           Recipe         @relation(fields: [recipeId],     references: [id], onDelete: Cascade)
    ingredient       Ingredient     @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
    unitSystemUnit   UnitSystemUnit @relation(fields: [unitSystemUnitId], references: [id])

    @@id([recipeId, ingredientId])
    @@index([quantity])
}

model Ingredient {
    id                  Int                            @id @default(autoincrement())
    name                String
    description         String?
    brand               String?
    createdAt           DateTime                       @default(now())
    updatedAt           DateTime                       @updatedAt

    meals               MealIngredient[]
    recipes             RecipeIngredient[]
    nutrients           IngredientNutrient[]
    defaultUnits        DefaultIngredientUnit[]
    unitTypeConversions IngredientUnitTypeConversion[]

    @@index([name], type: Hash)
}

model IngredientNutrient {
    ingredientId     Int
    nutrientId       Int
    unitSystemUnitId Int
    quantity         Float
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    ingredient       Ingredient     @relation(fields: [ingredientId],     references: [id])
    nutrient         Nutrient       @relation(fields: [nutrientId],       references: [id])
    unitSystemUnit   UnitSystemUnit @relation(fields: [unitSystemUnitId], references: [id])

    @@id([ingredientId, nutrientId])
    @@index([quantity])
}

model Nutrient {
    id              Int                          @id @default(autoincrement())
    parentId        Int?
    typeId          Int
    name            String
    description     String?
    createdAt       DateTime                     @default(now())
    updatedAt       DateTime                     @updatedAt

    ingredients     IngredientNutrient[]
    children        Nutrient[]                   @relation(name: "children")
    defaultUnits    DefaultNutrientUnit[]
    unitConversions NutrientUnitTypeConversion[]

    parent          Nutrient?                    @relation(name: "children", fields: [parentId],      references: [id])
    type            NutrientType                 @relation(                  fields: [typeId],        references: [id])

    @@index([name], type: Hash)
}

model NutrientType {
    id          Int        @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    nutrients   Nutrient[]

    @@index([name], type: Hash)
}

model Unit {
    id                               Int                            @id @default(autoincrement())
    name                             String
    symbol                           String?
    description                      String?
    createdAt                        DateTime                       @default(now())
    updatedAt                        DateTime                       @updatedAt

    unitSystems                      UnitSystemUnit[]

    @@index([name],            type: Hash)
    @@index([symbol],          type: Hash)
}

model UnitType {
    id                               Int                            @id @default(autoincrement())
    name                             String
    description                      String?
    createdAt                        DateTime                       @default(now())
    updatedAt                        DateTime                       @updatedAt

    unitSystemUnits                  UnitSystemUnit[]
    unitSystemConversions            UnitSystemConversion[]
    ingredientConversionSources      IngredientUnitTypeConversion[] @relation(name: "sourceUnitType")
    ingredientConversionDestinations IngredientUnitTypeConversion[] @relation(name: "destinationUnitType")
    nutrientConversionSources        NutrientUnitTypeConversion[]   @relation(name: "sourceUnitType")
    nutrientConversionDestinations   NutrientUnitTypeConversion[]   @relation(name: "destinationUnitType")

    @@index([name], type: Hash)
}

model UnitSystemUnit {
    id                               Int                            @id @default(autoincrement())
    unitId                           Int
    unitSystemId                     Int
    unitTypeId                       Int
    scale                            Float                          @default(1)
    createdAt                        DateTime                       @default(now())
    updatedAt                        DateTime                       @updatedAt

    ingredientDefaults               DefaultIngredientUnit[]
    nutrientDefaults                 DefaultNutrientUnit[]
    mealIngredients                  MealIngredient[]
    recipeIngredients                RecipeIngredient[]
    ingredientNutrients              IngredientNutrient[]
    userWeightMeasurements           UserWeightMeasurement[]
    ingredientConversionSources      IngredientUnitTypeConversion[] @relation(name: "sourceUnitSystemUnit")
    ingredientConversionDestinations IngredientUnitTypeConversion[] @relation(name: "destinationUnitSystemUnit")
    nutrientConversionSources        NutrientUnitTypeConversion[]   @relation(name: "sourceUnitSystemUnit")
    nutrientConversionDestinations   NutrientUnitTypeConversion[]   @relation(name: "destinationUnitSystemUnit")
    userPreferences                  User[]

    unit                             Unit                           @relation(fields: [unitId],       references: [id])
    unitSystem                       UnitSystem                     @relation(fields: [unitSystemId], references: [id])
    unitType                         UnitType                       @relation(fields: [unitTypeId],   references: [id])

    @@unique([id, unitTypeId])
    @@unique([unitId, unitSystemId])
    @@index([scale], type: Hash)
}

model UnitSystem {
    id                     Int                    @id @default(autoincrement())
    name                   String
    description            String?
    createdAt              DateTime               @default(now())
    updatedAt              DateTime               @updatedAt

    units                  UnitSystemUnit[]
    ingredientDefaults     DefaultIngredientUnit[]
    nutrientDefaults       DefaultNutrientUnit[]
    sourceConversions      UnitSystemConversion[] @relation(name: "sourceUnitSystem")
    destinationConversions UnitSystemConversion[] @relation(name: "destinationUnitSystem")

    @@index([name], type: Hash)
}


model DefaultIngredientUnit {
    ingredientId     Int
    unitSystemId     Int
    unitSystemUnitId Int
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    ingredient       Ingredient     @relation(fields: [ingredientId],     references: [id])
    unitSystem       UnitSystem     @relation(fields: [unitSystemId],     references: [id])
    unitSystemUnit   UnitSystemUnit @relation(fields: [unitSystemUnitId], references: [id])

    @@id([ingredientId, unitSystemId])
}

model DefaultNutrientUnit {
    nutrientId       Int
    unitSystemId     Int
    unitSystemUnitId Int
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    nutrient         Nutrient       @relation(fields: [nutrientId],       references: [id])
    unitSystem       UnitSystem     @relation(fields: [unitSystemId],     references: [id])
    unitSystemUnit   UnitSystemUnit @relation(fields: [unitSystemUnitId], references: [id])

    @@id([nutrientId, unitSystemId])
}

model UnitSystemConversion {
    unitTypeId              Int
    sourceUnitSystemId      Int
    destinationUnitSystemId Int
    scale                   Float      @default(1)
    offset                  Float      @default(0)
    createdAt               DateTime   @default(now())
    updatedAt               DateTime   @updatedAt

    unitType                UnitType   @relation(fields: [unitTypeId], references: [id])
    sourceUnitSystem        UnitSystem @relation(name: "sourceUnitSystem",      fields: [sourceUnitSystemId],      references: [id])
    destinationUnitSystem   UnitSystem @relation(name: "destinationUnitSystem", fields: [destinationUnitSystemId], references: [id])

    @@id([unitTypeId, sourceUnitSystemId, destinationUnitSystemId])    
    @@index([scale], type: Hash)
    @@index([offset], type: Hash)
}

model IngredientUnitTypeConversion {
    ingredientId                Int
    sourceUnitTypeId            Int
    sourceUnitSystemUnitId      Int
    destinationUnitTypeId       Int
    destinationUnitSystemUnitId Int
    scale                       Float          @default(1)
    createdAt                   DateTime       @default(now())
    updatedAt                   DateTime       @updatedAt

    ingredient                  Ingredient     @relation(                                   fields: [ingredientId],                                       references: [id])
    sourceUnitType              UnitType       @relation(name: "sourceUnitType",            fields: [sourceUnitTypeId],                                   references: [id])
    sourceUnitSystemUnit        UnitSystemUnit @relation(name: "sourceUnitSystemUnit",      fields: [sourceUnitSystemUnitId, sourceUnitTypeId],           references: [id, unitTypeId])
    destinationUnitType         UnitType       @relation(name: "destinationUnitType",       fields: [destinationUnitTypeId],                              references: [id])
    destinationUnitSystemUnit   UnitSystemUnit @relation(name: "destinationUnitSystemUnit", fields: [destinationUnitSystemUnitId, destinationUnitTypeId], references: [id, unitTypeId])

    @@id([ingredientId, sourceUnitTypeId, destinationUnitTypeId])
    @@index([scale], type: Hash)
}

model NutrientUnitTypeConversion {
    nutrientId                  Int
    sourceUnitTypeId            Int
    sourceUnitSystemUnitId      Int
    destinationUnitTypeId       Int
    destinationUnitSystemUnitId Int
    scale                       Float          @default(1)
    createdAt                   DateTime       @default(now())
    updatedAt                   DateTime       @updatedAt

    nutrient                    Nutrient       @relation(                                   fields: [nutrientId],                                         references: [id])
    sourceUnitType              UnitType       @relation(name: "sourceUnitType",            fields: [sourceUnitTypeId],                                   references: [id])
    sourceUnitSystemUnit        UnitSystemUnit @relation(name: "sourceUnitSystemUnit",      fields: [sourceUnitSystemUnitId, sourceUnitTypeId],           references: [id, unitTypeId])
    destinationUnitType         UnitType       @relation(name: "destinationUnitType",       fields: [destinationUnitTypeId],                              references: [id])
    destinationUnitSystemUnit   UnitSystemUnit @relation(name: "destinationUnitSystemUnit", fields: [destinationUnitSystemUnitId, destinationUnitTypeId], references: [id, unitTypeId])

    @@id([nutrientId, sourceUnitTypeId, destinationUnitTypeId])
    @@index([scale], type: Hash)
}

model UserWeightMeasurement {
    id               Int            @id @default(autoincrement())
    userId           Int
    weight           Float
    unitSystemUnitId Int
    measuredAt       DateTime       @default(now())
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    unitSystemUnit   UnitSystemUnit @relation(fields: [unitSystemUnitId], references: [id])
}

model Account {
    id                       Int      @id @default(autoincrement())
    userId                   Int
    type                     String
    provider                 String
    providerAccountId        Int
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt

    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId], type: Hash)
}

model Session {
    id           Int      @id @default(autoincrement())
    userId       Int
    sessionToken String   @unique
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], type: Hash)
}

model User {
    id                    Int                @id @default(autoincrement())
    username              String?            @unique
    email                 String?            @unique
    emailVerified         DateTime?
    displayName           String
    image                 String?
    preferredUnitSystemId Int?
    createdAt             DateTime           @default(now())
    updatedAt             DateTime           @updatedAt

    accounts              Account[]
    sessions              Session[]
    meals                 UserMealConsumer[]
    preparedMeals         Meal[]
    
    preferredUnitSystem   UnitSystemUnit? @relation(fields: [preferredUnitSystemId], references: [id])

    @@index([username], type: Hash)
    @@index([email], type: Hash)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}
